@model Tecidolandia.Models.ViewEntities.OrdemDeVendaViewModel

@{
    ViewBag.Title = "Create";
}

<br />
<h3 class="text-center">
    Cadastrar Venda
</h3>
<hr />
<br />


<div class="panel-body">
    <div class="col-md-12">

        <div class="row">

            <div class="col-md-2">
                <div id="divIdVenda">
                    @Html.Partial("_IdVenda")
                </div>
            </div>

            <div class="col-md-2">
                <label><span class="label label-default ">* Vendedor:</span></label>
                <br />
                @Html.DropDownListFor(model => model.IdVendedor, Model.VendedorList.OrderBy(o => o.Nome).Select(x => new SelectListItem
           {
               Value = x.IdVendedor.ToString(),
               Text = x.Nome
           }), "Selecione", new { @class = "btn btn-default dropdown-toggle", @required = "required" })
            </div>

            <div class="col-md-2">
                <label><span class="label label-default ">* Cliente:</span></label>
                <br />
                @Html.DropDownListFor(model => model.IdCliente, Model.ClienteList.OrderBy(o => o.NmCompleto).Select(x => new SelectListItem
           {
               Value = x.IdCliente.ToString(),
               Text = x.NmCompleto
           }), "Selecione", new { @class = "btn btn-default dropdown-toggle", @required = "required" })
            </div>

            <div class="col-md-2">
                <label><span class="label label-default ">* Status:</span></label>
                <br />
                @Html.DropDownListFor(model => model.IdStatus, Model.StatusList.OrderBy(o => o.NmStatus).Select(x => new SelectListItem
           {
               Value = x.IdStatus.ToString(),
               Text = x.NmStatus
           }), "Selecione", new { @class = "btn btn-default dropdown-toggle", @required = "required" })
            </div>
            <br />
            <div class="col-md-2">
                <input type="submit" name="submit" id="SalvarVenda" value="Salvar" class="btn btn-default dropdown-toggle" />
            </div>
            @ViewBag.MsgErroVenda
        </div>

        <br />
        <hr />
        <br />

        <div class="row">

            <div class="col-md-2">
                <label><span class="label label-default ">* Produto:</span></label>
                <br />
                @Html.DropDownListFor(model => model.IdProduto, Model.ProdutoList.OrderBy(o => o.IdProduto).Select(x => new SelectListItem
           {
               Value = x.IdProduto.ToString(),
               Text = x.Nome
           }), "Selecione", new { @class = " btn btn-default dropdown-toggle ", @required = "required" })

            </div>

            @*<button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                Dropdown
                <span class="caret"></span>
            </button>*@


            <div class="col-md-3">
                <label><span class="label label-default ">* Quantidade:</span></label>
                @Html.EditorFor(model => model.Quantidade, new { htmlAttributes = new { @class = "btn btn-default dropdown-toggle" } })
            </div>

            <div class="col-md-3">
                <label><span class="label label-default ">* Valor Total:</span></label>
                @Html.EditorFor(model => model.ValorProduto, new { htmlAttributes = new { @class = "btn btn-default dropdown-toggle" } })
            </div>

            <div class="col-md-3">
                <br />
                <input type="submit" name="submit" id="SalvarItemVenda" value=" + " class="btn btn-default dropdown-toggle" />
            </div>

        </div>

        <div class="row">
            @*<div id="divItemVenda" style="display: none;">*@
            <div id="divItemVenda">
                @Html.Partial("_PartialItemVenda")
            </div>
        </div>

    </div>

</div>


<div>
    @Html.ActionLink("Lista de Produtos", "Index")
</div>


@section Scripts {
    <script type="text/javascript">

        $(document).on('click', '#SalvarVenda', function () {
            //console.log("clicou Savar Pacote");
            salvarVenda();
        });

        $(document).on('click', '#SalvarItemVenda', function () {
            //console.log("clicou Savar Pacote");
            salvarItemVenda();
        });


        function salvarItemVenda() {

            var ItemVenda = {};
            var mensage = "";

            var ItemVenda_IdVenda = $("#Venda_IdVenda").val();
            var ItemVenda_IdProduto = $("#IdProduto").val();
            var ItemVenda_Quantidade = $("#Quantidade").val();
            var ItemVenda_ValorProduto = $("#ValorProduto").val();

            if (ItemVenda_IdProduto == "" || ItemVenda_IdProduto == undefined) { mensage += "Produto, "; }
            if (ItemVenda_Quantidade == "" || ItemVenda_Quantidade == undefined) { mensage += "Quantidade, "; }
            if (ItemVenda_ValorProduto == "" || ItemVenda_ValorProduto == undefined) { mensage += "Valor Total, "; }

            if (mensage != "") {
                console.log(mensage);
                return alert(mensage + ' não pode(m) ser vazio(s)!!');

            } else {
                ItemVenda = {
                    IdVenda: parseInt(ItemVenda_IdVenda),
                    //IdVenda: 1,
                    IdProduto: parseInt(ItemVenda_IdProduto),
                    Quantidade: parseInt(ItemVenda_Quantidade),
                    VlTotal: parseFloat(ItemVenda_ValorProduto),
                }
                console.log("Else", ItemVenda);

            }

            var itemVenda = JSON.stringify(ItemVenda);
            console.log("Json", itemVenda);

            if (itemVenda.length > 0) {

                var result = chamarApi("/Vendas/SalvarItemVenda", 'POST', itemVenda, "#divItemVenda", "Item adicionado com Sucesso!");

                if (result == "true") {
                    console.log("Venda item Sucesso Api");

                    //if (msg.status != undefined && msg.status != '') {
                    //    $("#divIdVenda").html(msg.partialView);
                    //}
                }

            } console.log("chamou", itemVenda);

        }

        function salvarVenda() {

            var Venda = {};
            var mensage = "";

            var Venda_IdVenda = $("#IdVenda").val();
            var Venda_IdStatus = $("#IdStatus").val();
            var Venda_IdCliente = $("#IdCliente").val();
            var Venda_IdVendedor = $("#IdVendedor").val();

            //console.log("Venda_IdStatus: " + Venda_IdStatus);

            if (Venda_IdStatus == "" || Venda_IdStatus == undefined) { mensage += "Status, "; }
            if (Venda_IdCliente == "" || Venda_IdCliente == undefined) { mensage += "Cliente, "; }
            if (Venda_IdVendedor == "" || Venda_IdVendedor == undefined) { mensage += "Vendedor, "; }

            if (mensage != "") {
                console.log(mensage);
                return alert(mensage + ' não pode(m) ser vazio(s)!!');

            } else {
                Venda = {
                    IdVenda: parseInt(Venda_IdVenda),
                    IdStatus: parseInt(Venda_IdStatus),
                    IdCliente: parseInt(Venda_IdCliente),
                    IdVendedor: parseInt(Venda_IdVendedor),
                }

            }

            var venda = JSON.stringify(Venda);

            if (venda.length > 0) {

                var result = chamarApi("/Vendas/SalvarVenda", 'POST', venda, "#divIdVenda", "Venda Iniciada com Sucesso!");

                if (result == "true") {
                    console.log("Venda Sucesso Api");

                    //if (msg.status != undefined && msg.status != '') {
                    //    $("#divIdVenda").html(msg.partialView);
                    //}
                }

            }
        }


        function chamarApi(_url, _method, _data, _partialViewName, _msgSucessoPersonalizada = "Concluido com Sucesso!") {
            var mensage = "";

            var result = "";

            $.ajax({
                url: _url,
                method: _method,
                data: _data,
                dataType: "json",
                cache: false,
                contentType: 'application/json; charset=utf-8',
                processData: false
            }).done(function (msg) {

                if (msg.status.includes("NOK")) {
                    let results = "----";
                    if (msg.mesage != undefined && msg.mesage != '') { results = msg.mesage; }

                    //toast("Atenção", results, "error");
                    console.log(msg.error);
                    alert('Ops! Ocorreu um Erro!! :' + msg.error);

                    result = "false";
                    //console.log("msg", msg);

                } else {
                    result = "true";
                    alert(_msgSucessoPersonalizada);

                    if (_partialViewName != null || _partialViewName != undefined) {
                        if (msg.partialView != undefined && msg.partialView != '') {
                            console.log("Partial atualizada: ", _partialViewName);

                            $(_partialViewName).html(msg.partialView);
                        }
                    }
                    /*                  console.log("msg", msg);*/

                }
                console.log(msg.description);
                mensage = msg.description;
            }).fail(function (jqXHR, textStatus, msg) {
                console.log(`${textStatus} - ${msg} - ${jqXHR}`);
                console.log(msg.description);
                mensage = msg.description;
            });

            var refreshId = setInterval(function () {
                if (result != "") {
                    clearInterval(refreshId);
                    //sair do looping
                }
            }, 100);

            return result;
        }


    </script>

}